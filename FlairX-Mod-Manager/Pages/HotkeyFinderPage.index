COMPONENT: HotkeyFinderPage
DESCRIPTION: Page for detecting and updating mod hotkeys from INI files with comprehensive key mapping

================================================================================
FILE: Pages/HotkeyFinderPage.xaml
TOTAL LINES: 44

LINE RANGES:
├── XML Declaration: line 1
├── Page Declaration: lines 2-12
│   ├── Class definition: line 3
│   ├── Namespace declarations: lines 4-9
│   └── Design properties: lines 10-12
├── Main Grid: lines 13-43
│   ├── StackPanel container: lines 14-42
│   │   ├── Settings Grid: lines 15-30
│   │   │   ├── Grid definitions: lines 16-23
│   │   │   ├── Auto Detect setting: lines 24-26
│   │   │   └── Refresh All setting: lines 27-29
│   │   └── Control Panel: lines 31-41
│   │       ├── Refresh Button: lines 32-38
│   │       │   ├── Button icons: lines 34-36
│   │       │   └── Button text: line 37
│   │       └── Progress Bar: line 39

UI ELEMENTS:
- AutoDetectLabel: line 24 - Auto detect mode label
- AutoDetectToggle: lines 25-26 - Auto detect toggle with tooltip
- RefreshAllLabel: line 27 - Refresh all mode label
- RefreshAllToggle: lines 28-29 - Refresh all toggle with tooltip
- RefreshButton: lines 32-38 - Main action button
- RefreshIcon: line 34 - Refresh icon (&#xE72C;)
- CancelIcon: line 35 - Cancel icon (&#xE711;)
- RefreshButtonText: line 37 - Dynamic button text
- RefreshProgressBar: line 39 - Progress indicator

================================================================================
FILE: Pages/HotkeyFinderPage.xaml.cs
TOTAL LINES: 660

LINE RANGES:
├── Using statements: lines 1-11
├── Namespace declaration: lines 12-13
├── HotkeyFinderPage class: lines 14-706
│   ├── Fields and properties: lines 15-21
│   │   ├── Cancellation token: line 15
│   │   ├── Processing flag: line 16
│   │   └── Singleton instance: lines 19-20
│   ├── Constructor: lines 22-29
│   ├── UpdateTexts: lines 31-41
│   ├── Settings management: lines 43-65
│   │   ├── LoadSettings: lines 43-51
│   │   └── SaveSettings: lines 53-65
│   ├── Event handlers: lines 67-105
│   │   ├── Toggle handlers: lines 67-74
│   │   ├── RefreshButton_Click: lines 76-84
│   │   └── RefreshButtonClickAsync: lines 86-105
│   ├── Core detection logic: lines 107-160
│   │   └── DetectAndUpdateHotkeysAsync: lines 107-160
│   ├── RefreshAllModsAsync: lines 162-235
│   ├── Auto detection methods: lines 237-285
│   │   ├── AutoDetectHotkeysForModAsync: lines 237-250
│   │   └── AutoDetectHotkeysForModStaticAsync: lines 252-285
│   ├── ShowInfoBar: lines 287-305
│   ├── Key mapping dictionary: lines 307-395
│   │   ├── Arrow keys: lines 309-311
│   │   ├── Numeric keys: lines 313-319
│   │   ├── Mouse buttons: lines 321-323
│   │   ├── Modifier keys: lines 325-331
│   │   ├── Special keys: lines 333-337
│   │   ├── Special characters: lines 339-343
│   │   ├── Xbox controller: lines 345-351
│   │   ├── PlayStation controller: lines 353-359
│   │   ├── Function keys: lines 361-365
│   │   ├── Navigation keys: lines 367-369
│   │   ├── Lock keys: lines 371-372
│   │   └── Windows keys: lines 374-375
│   ├── Helper classes: lines 377-385
│   │   ├── HotkeyInfo: lines 377-381
│   │   └── HotkeyFinderSettings: lines 383-385
│   ├── File processing: lines 387-450
│   │   ├── FindIniFilesStaticRecursive: lines 387-410
│   │   ├── ParseIniFileStaticAsync: lines 412-415
│   │   ├── ParseKeyValueStatic: lines 417-420
│   │   └── UpdateModJsonWithHotkeysStaticAsync: lines 422-425
│   ├── ParseIniFileCommonAsync: lines 427-570
│   │   ├── File reading: lines 435-440
│   │   ├── Section parsing: lines 442-470
│   │   ├── Key prefix filtering: lines 472-530
│   │   └── Key/back pattern matching: lines 532-570
│   ├── ParseKeyValueCommon: lines 572-650
│   │   ├── Key parsing: lines 580-595
│   │   ├── Modifier processing: lines 597-635
│   │   └── HotkeyInfo creation: lines 637-650
│   └── UpdateModJsonWithHotkeysCommonAsync: lines 652-706
│       ├── JSON file handling: lines 660-675
│       ├── Default mod.json creation: lines 677-690
│       └── Hotkey array serialization: lines 692-706

================================================================================
COMPONENT OVERVIEW

KEY METHODS:
- Constructor: lines 22-29 - Initialize UI, singleton, and load settings
- DetectAndUpdateHotkeysAsync: lines 107-160 - Core hotkey detection for multiple mods
- RefreshAllModsAsync: lines 162-235 - Process all mods with progress tracking
- ParseIniFileCommonAsync: lines 427-570 - Parse INI files for hotkey sections
- ParseKeyValueCommon: lines 572-650 - Process individual key bindings with modifiers
- UpdateModJsonWithHotkeysCommonAsync: lines 652-706 - Update mod.json with discovered hotkeys

FUNCTIONALITY:
- Auto detect hotkeys when mods are added (singleton pattern)
- Manual refresh of all existing mods with cancellation support
- Progress tracking with indeterminate progress bar
- Button state switching between Refresh/Cancel modes
- Comprehensive key format parsing (VK codes, controller buttons, etc.)
- Automatic mod.json creation if missing
- Support for both instance and static method calls

LAYOUT:
- 3-column grid for settings (300px + 32px + 44px)
- Toggle switches aligned to right column
- Horizontal button and progress bar stack
- Proper spacing (16px, 24px margins)

KEY MAPPING SYSTEM:
- Comprehensive dictionary with 80+ key mappings (lines 307-395)
- Arrow keys with Unicode symbols (↑↓←→)
- Numeric keypad support (NUM 0-9, +, -, *, /, .)
- Mouse buttons (LMB, RMB, MMB, X1, X2)
- Modifier keys (CTRL, ALT, SHIFT with L/R variants)
- Special keys (ESC, ENTER, TAB, SPACE, etc.)
- Xbox controller (XB A, B, X, Y, LB, RB, LT, RT, etc.)
- PlayStation controller (□, ×, ○, △, L1-L3, R1-R3, etc.)
- Function keys (F1-F12)
- Navigation and lock keys

INI FILE PARSING:
- Recursive directory scanning excluding "disabled" prefixes
- Section-based parsing with [key...] pattern matching
- Advanced key prefix filtering system:
  - Removes "swapswapvar", "keyswapvar", "keyswap", "swapvar"
  - Removes "key", "swap" prefixes iteratively
  - Defaults to "Toggle" if description becomes empty
- Support for both "key=" and "back=" entries
- Modifier exclusion with "no_" prefix handling

SETTINGS PERSISTENCE:
- AutoDetectEnabled: Automatically detect on mod add
- RefreshAllEnabled: Enable manual refresh (not persisted)
- Settings saved to HotkeyFinder.json in game-specific path
- Singleton pattern for cross-component access

THREAD SAFETY & ASYNC:
- CancellationTokenSource for operation cancellation
- Proper async/await patterns throughout
- UI updates on main dispatcher thread
- File I/O operations with cancellation token support
- Exception handling with comprehensive logging

MODIFIER KEY PROCESSING:
- Complex modifier parsing with exclusion support
- "no_" prefix handling for excluded modifiers
- Proper modifier combination display (CTRL+ALT+Key)
- Support for left/right specific modifiers
- Back key suffix handling " (Back)"

ERROR HANDLING:
- Comprehensive try-catch blocks for all file operations
- Logger integration for debugging and monitoring
- Graceful fallback for missing or corrupted files
- User-friendly error dialogs with translation support
- Automatic mod.json creation fallback system

TRANSLATION SUPPORT:
- Dynamic text updates with SharedUtilities integration
- Tooltip translations for all interactive elements
- Error message localization
- Progress and completion message translation
- Hardcoded Polish tooltips in XAML as fallback
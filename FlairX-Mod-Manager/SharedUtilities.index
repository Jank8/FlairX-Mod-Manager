# SharedUtilities.cs - Indeks Klasy

## Opis
Shared utilities to eliminate code duplication

## WIN32 FOLDER PICKER

### DLL Imports
- `SHBrowseForFolder(ref BROWSEINFO bi)` - Shell32 folder browser
- `SHGetPathFromIDList(IntPtr pidl, StringBuilder pszPath)` - Path from ID list

### Struktury
- `BROWSEINFO` - Struktura dla folder picker dialog
  - hwndOwner, pidlRoot, pszDisplayName, lpszTitle
  - ulFlags, lpfn, lParam, iImage

### Metody
- `PickFolderAsync(nint hwnd, string title)` - Asynchronicznie otwiera dialog wyboru folderu Win32
  - Używa TaskCompletionSource<string?>
  - STA thread dla Win32 compatibility
  - BIF_NEWDIALOGSTYLE flag (0x00000040)
  - Comprehensive error handling

## FILESYSTEM UTILITIES

### Metody
- `IsNtfsFileSystem(string path)` - Sprawdza czy ścieżka znajduje się na systemie plików NTFS
  - Pobiera DriveInfo z root path
  - Sprawdza DriveFormat == "NTFS" (case insensitive)
  - Error handling z Logger
- `OpenWithDefaultApp(string path)` - Bezpiecznie otwiera plik lub URL z domyślną aplikacją
  - Używa ProcessStartInfo z UseShellExecute = true
  - Loguje success/error
- `GetMainWindowHandle()` - Pobiera handle głównego okna aplikacji
  - Pobiera MainWindow z App.Current
  - Używa WinRT.Interop.WindowNative.GetWindowHandle
  - Fallback do IntPtr.Zero

## UI UTILITIES

### BreadcrumbBar Management
- `SetBreadcrumbBarPath(BreadcrumbBar bar, string path)` - Ustawia elementy BreadcrumbBar na podstawie ścieżki
- `GetBreadcrumbBarPath(BreadcrumbBar bar)` - Pobiera ścieżkę z BreadcrumbBar

## LANGUAGE UTILITIES

### Metody
- `LoadLanguageDictionary(string? subfolder = null)` - Loads language dictionary from specified subfolder
  - Obsługuje main language files
  - Obsługuje module-specific language files
  - Wyklucza Language_DisplayName
  - Comprehensive error handling
- `GetTranslation(Dictionary<string, string> dictionary, string key)` - Gets translated string, returns key if not found
  - Debugging missing translations
  - Null dictionary handling
  - Empty key handling

## DIALOG UTILITIES

### Metody
- `ShowErrorDialog(string title, string message, XamlRoot? xamlRoot)` - Shows a standard error dialog
- `ShowConfirmationDialog(string title, string message, string confirmText, string cancelText, XamlRoot? xamlRoot)` - Shows a standard confirmation dialog
- `ShowInfoDialog(string title, string message, XamlRoot? xamlRoot)` - Shows a standard info dialog

## JSON SETTINGS

### Metody
- `LoadJsonSettings<T>(string fileName)` - Safely loads JSON settings from file
- `SaveJsonSettings<T>(string fileName, T settings)` - Safely saves JSON settings to file

## PATH UTILITIES

### Metody
- `IsValidModDirectory(string? directoryName)` - Validates mod directory name using SecurityValidator
- `GetSafeModLibraryPath(string? subPath = null)` - Gets mod library path safely
- `GetSafeXXMIModsPath(string? subPath = null)` - Gets XXMI mods path safely

## Zależności
- Microsoft.UI.Xaml.Controls
- System.IO
- System.Text.Json
- System.Threading.Tasks
- System.Runtime.InteropServices
- PathManager (GetLanguagePath, GetSettingsPath, GetRelativePath, EnsureDirectoryExists)
- SettingsManager (Current, LanguageFile)
- SecurityValidator (IsValidModDirectoryName)
- Logger (LogError, LogInfo)

## Funkcjonalności
1. **Win32 folder picker integration**
2. **Filesystem utilities (NTFS check, default app opening)**
3. **UI helpers (BreadcrumbBar management)**
4. **Language system support**
5. **Standard dialog utilities**
6. **JSON settings management**
7. **Path validation and safety**
8. **Window handle management**
9. **Comprehensive error handling**
10. **Async operations support**